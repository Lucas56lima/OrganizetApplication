@using System.Diagnostics
@using Domain.Entities
@using Microsoft.Extensions.Logging
@using System.Diagnostics.Tracing
@inject NavigationManager Navigation
@inject HttpClient httpClient
@code {
    [Parameter]
    public bool IsVisible { get; set; }
    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }
    private bool isLoading = false;
    private async Task ClosePopup()
    {
        IsVisible = false;
        await IsVisibleChanged.InvokeAsync(IsVisible);
    }
}

@if (IsVisible)
{
    <div class="popup-overlay" @onclick="ClosePopup">
        <div class="popup-content" @onclick:stopPropagation="true">
            <h2 id="title">@titlePage</h2>

            <!-- Exibir o spinner de carregamento se isLoading for verdadeiro -->
            @if (isLoading)
            {                
                <div class="loading-spinner-container" style="--spinner-height:20vh">
                    <div class="loading-spinner"></div>
                </div>                            
            }
            else if (taskCreated)
            {
                <div>
                    <p>@notificationMessage</p>
                </div>
            }
            else
            {
                <EditForm Model="taskForMany" OnValidSubmit="SubmitForm">
                    <!-- Corrigido aqui -->
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <!-- Botão de fechamento dentro do formulário -->
                    <button type="button" class="close-btn" @onclick="ClosePopup">&times;</button>

                    <!-- Dropdown de seleção de tipo de tarefa -->
                    <select @bind="selectedItem" required>
                        @foreach (var item in items)
                        {
                            <option value="@item">@item</option>
                        }
                    </select><br><br>

                    <!-- Campo de Título -->
                    <label for="title">Título: </label><br />
                    <InputText id="title" @bind-Value="taskForMany.Title" required /><br><br>

                    <label for="description">Descrição: </label><br />
                    <InputText id="description" @bind-Value="taskForMany.Description" /><br><br>

                    <!-- Checkboxes para Setores -->
                    @if (selectedItem == "Em Grupo")
                    {
                        <label for="sector">Setor:</label> <br />
                        @foreach (var sector in sectors)
                        {
                            <div class="sectors-content">
                                <InputCheckbox @bind-Value="sector.IsSelected" />
                                <label>@sector.Name</label>
                            </div>
                        }
                    }
                    <br/>
                    <button type="submit" class="btn btn-primary" style="margin: 20px">Enviar</button>
                </EditForm>
            }
        </div>
    </div>   
}

@code {
    public TaskForMany taskForMany = new TaskForMany();
    public TaskForUser taskForUser = new TaskForUser();        
    public string titlePage;    
    public TaskForManySector taskForManySector = new TaskForManySector();
    private List<string> items = new List<string> {" ","Para Mim", "Em Grupo" };
    private string selectedItem;
    private bool taskCreated = false;
    private string notificationMessage;      
    private IEnumerable<Sector> sectors = new List<Sector>();
    [Inject] private ILogger<PopupForm> _logger { get; set; }

    protected override async Task OnInitializedAsync()
    {
        titlePage = "Criar Tarefa";        
        await LoadSectors();
    }

    private async Task HandleSubmit()
    {        
        await ClosePopup(); // Fechar o popup após o envio
    }

    private async Task SubmitForm()
    {
        isLoading = true; // Inicia o carregamento (exibe o spinner)        
        titlePage = "";
        StateHasChanged(); // Força a atualização da interface

        try
        {
            if (selectedItem == "Em Grupo")
            {
                await PostNewTaskForMany(taskForMany);                
            }
            else if (selectedItem == "Para Mim")
            {
                taskForUser.Title = taskForMany.Title;
                await PostNewTaskForUser(taskForUser);               
            }           

        }
        catch (Exception ex)
        {
            // Aqui você pode adicionar o tratamento de erros
            Console.WriteLine($"Erro ao criar tarefa: {ex.Message}");
        }
        finally
        {
            await Task.Delay(2000); // Simulação de tempo para o spinner
            isLoading = false; // Finaliza o carregamento (oculta o spinner)             

            await ClosePopup();                       
        }
        StateHasChanged();
    }

    public async Task PostNewTaskForMany(TaskForMany taskForMany)
    {
        try
        {           
            var selectedItems = sectors.Where(s => s.IsSelected).Select(s => s.Id).ToList();

            // Preparar o objeto para enviar na requisição
            var response = await httpClient.PostAsJsonAsync("TaskForMany/RegisterNewTaskForMany", taskForMany);

            if (response.IsSuccessStatusCode)
            {
                // Ler a resposta e deserializar o objeto TaskForMany
                var createdTask = await response.Content.ReadFromJsonAsync<TaskForMany>();                
                if (createdTask != null)
                {
                    // Atualizar o objeto taskForMany com o ID retornado
                    taskForMany.Id = createdTask.Id;

                    // Postar setores relacionados
                    await PostTaskForManySectors(taskForMany, selectedItems);
                    taskCreated = true;
                    titlePage = "Criando Tarefa";
                    notificationMessage = "Tarefa criada com sucesso!";
                }
                else
                {
                    _logger.LogInformation("Erro: Tarefa criada não retornou um ID válido.");
                }
            }
            else
            {
                _logger.LogInformation($"Erro ao criar a tarefa. Código de status: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            var errorMessage = $"Erro ao fazer POST: {ex.Message}";
            _logger.LogInformation($"Erro {errorMessage}");
        }
    }

    private async Task PostTaskForManySectors(TaskForMany taskForMany, List<int> selectedItems)
    {
        if (taskForMany == null)
        {
            _logger.LogInformation("Tarefa para muitos não pode ser nula.");
            return;
        }

       
        try
        {
            
            foreach (int item in selectedItems)
            {
                try
                {
                    taskForManySector.TaskId = taskForMany.Id;
                    taskForManySector.SectorId = item;
                    taskForManySector.Status = 1;

                    var response = await httpClient.PostAsJsonAsync("TaskForManySectors/RegisterNewTaskForManySector", taskForManySector);

                    if (response.IsSuccessStatusCode)
                    {
                        var resultForSector = await response.Content.ReadAsStringAsync();
                        Debug.WriteLine($"Setor associado com sucesso: {resultForSector}");
                    }
                    else
                    {
                        _logger.LogInformation($"Erro ao associar o setor {item}. Código de status: {response.StatusCode}");
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogInformation($"Erro ao associar o setor {item}: {ex.Message}");
                }
            }
            taskCreated = true;
        }
        catch (Exception ex)
        {
            _logger.LogInformation($"Erro ao se conectar ao endpoint SSE: {ex.Message}");
        }
        
    }


    
    public async Task PostNewTaskForUser(TaskForUser taskForUser)
    {
        try
        {
                       
            taskForUser.CreatorUserId = 1;
            taskForUser.Status = 1;

            var response = await httpClient.PostAsJsonAsync("TaskForUser/RegisterNewTaskForUser", taskForUser);

            if (response.IsSuccessStatusCode)
            {                
                Debug.WriteLine($"{response.IsSuccessStatusCode}");
                notificationMessage = "Tarefa criada com sucesso!";
                StateHasChanged();
            }

        }
        catch (Exception ex)
        {
            var errorMessage = $"Erro ao fazer POST: {ex.Message}";
            _logger.LogInformation($"Erro {errorMessage}");
        }
    }

    public async Task LoadSectors()
    {
        try
        {
            sectors = await httpClient.GetFromJsonAsync<IEnumerable<Sector>>("Sector/GetAllSectors");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao fazer GET: {ex.Message}");
            sectors = Enumerable.Empty<Sector>();
        }
    }



    public async Task<TaskForMany> LoadTaskForManyById(int id)
    {
        var taskForManyById = await httpClient.GetFromJsonAsync<TaskForMany>($"TaskForMany/GetTaskForManyById?idTaskForMany={id}");
        if (taskForManyById != null)
        {
            StateHasChanged();            
            taskForMany.Title = taskForManyById.Title;
            return taskForManyById;
        }
        else
        {
            throw new Exception("Failed to load task");
        }        
    }
    
    public async Task<IEnumerable<TaskForMany>> LoadTaskForManySectorById(int id)
    {
        var taskForManyById = await httpClient.GetFromJsonAsync<IEnumerable<TaskForMany>>($"TaskForManysector/GetTaskForManySectorById?idTask={id}");
        if (taskForManyById != null)
        {            
            return taskForManyById;
        }
        else
        {
            throw new Exception("Failed to load task");
        }
    }
       
    public class Sector
    {
        public int Id { get; set; }
        public string Name { get; set; }        
        public bool IsSelected { get; set; } = false;
    }
}
