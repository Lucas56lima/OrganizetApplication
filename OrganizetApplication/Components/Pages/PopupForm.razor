<h3>PopupForm</h3>

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    private async Task ClosePopup()
    {
        IsVisible = false;
        await IsVisibleChanged.InvokeAsync(IsVisible);
    }
}

@if (IsVisible)
{
    <div class="popup-overlay" @onclick="ClosePopup">
        <div class="popup-content" @onclick:stopPropagation="true">
            <button class="close-btn" @onclick="ClosePopup">&times;</button>
            <h2>Formulário</h2>
            <EditForm Model="formModel" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <label for="name">Nome:</label>
                <InputText id="name" @bind-Value="formModel.Name" required /><br><br>

                <label for="email">E-mail:</label>
                <InputText id="email" type="email" @bind-Value="formModel.Email" required /><br><br>

                <button type="submit">Enviar</button>
            </EditForm>
        </div>
    </div>
}

@code {
    private FormModel formModel = new FormModel();

    private void HandleSubmit()
    {
        // Lógica para lidar com o envio do formulário
        // Exemplo: salvar os dados ou enviar uma solicitação
        Console.WriteLine($"Nome: {formModel.Name}, Email: {formModel.Email}");
        ClosePopup(); // Fechar o popup após o envio
    }

    public class FormModel
    {
        public string Name { get; set; }
        public string Email { get; set; }
    }
}

